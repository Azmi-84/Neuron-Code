#!/usr/bin/env python3
# Material Personality Under Stress - A Humorous Scientific Simulation
# Generated by Copilot

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
import random
from scipy.optimize import curve_fit

class MaterialPersonality:
    """A class that simulates materials with unique personalities under stress"""
    
    def __init__(self, material_type):
        self.material_type = material_type
        self.stress_level = 0
        self.strain = 0
        self.breaking_point = 0
        self.youngs_modulus = 0
        self.mood_messages = []
        self.color = ""
        self.strain_history = []
        self.stress_history = []
        
        # Define material properties based on their "personality"
        if material_type == "Drama Queen Steel":
            self.youngs_modulus = 200e9  # Pa (actual steel value)
            self.breaking_point = 400e6  # Pa
            self.color = 'red'
            self.mood_messages = [
                "I'm FINE! (I'm not fine)",
                "Don't TOUCH me!",
                "I can't TAKE this anymore!",
                "I'm LITERALLY going to break!",
                "THIS IS THE WORST STRESS EVER!"
            ]
        
        elif material_type == "Zen Master Rubber":
            self.youngs_modulus = 0.05e9  # Pa (actual rubber value)
            self.breaking_point = 15e6  # Pa
            self.color = 'green'
            self.mood_messages = [
                "I bend, therefore I am",
                "Be like water, my friend",
                "The strain is just an illusion",
                "I accept this stress with peace",
                "Yielding is my strength"
            ]
            
        elif material_type == "Anxious Aluminum":
            self.youngs_modulus = 69e9  # Pa (actual aluminum value)
            self.breaking_point = 110e6  # Pa
            self.color = 'skyblue'
            self.mood_messages = [
                "Oh no, is that stress coming?",
                "I'm getting worried about this load",
                "What if I deform permanently?!",
                "I wasn't built for this much pressure!",
                "I think I'm having a plastic deformation!"
            ]
            
        elif material_type == "Overconfident Titanium":
            self.youngs_modulus = 110e9  # Pa (actual titanium value)
            self.breaking_point = 900e6  # Pa
            self.color = 'purple'
            self.mood_messages = [
                "Is that all you got?",
                "I could handle TWICE this stress!",
                "Aerospace grade, baby!",
                "You call THIS a load?",
                "I eat stress for breakfast!"
            ]
    
    def apply_stress(self, stress):
        """Apply stress to the material and calculate strain using Hooke's Law"""
        self.stress_level = stress
        
        # Actual physics: Hooke's Law (with some plastic deformation near breaking point)
        if stress < 0.7 * self.breaking_point:
            # Elastic region - Hooke's Law
            self.strain = stress / self.youngs_modulus
        else:
            # Near breaking point - add some non-linear behavior
            elastic_strain = stress / self.youngs_modulus
            plastic_factor = ((stress - 0.7 * self.breaking_point) / 
                             (0.3 * self.breaking_point)) ** 2
            plastic_strain = plastic_factor * 0.05  # Max 5% plastic strain
            self.strain = elastic_strain + plastic_strain
        
        self.stress_history.append(stress)
        self.strain_history.append(self.strain)
        
        return self.strain
    
    def get_mood(self):
        """Return the material's mood based on current stress level"""
        stress_ratio = self.stress_level / self.breaking_point
        
        if stress_ratio >= 0.95:
            return f"CRITICAL: {self.mood_messages[4]}"
        elif stress_ratio >= 0.8:
            return f"DANGER: {self.mood_messages[3]}"
        elif stress_ratio >= 0.6:
            return f"WARNING: {self.mood_messages[2]}"
        elif stress_ratio >= 0.3:
            return f"CONCERNED: {self.mood_messages[1]}"
        else:
            return f"RELAXED: {self.mood_messages[0]}"

    def is_broken(self):
        """Check if material has exceeded breaking point"""
        return self.stress_level > self.breaking_point


def ramberg_osgood(strain, E, sigma_y, n):
    """
    Ramberg-Osgood relationship for stress-strain curve
    Captures both elastic and plastic regions
    
    Parameters:
    - strain: strain values
    - E: Young's modulus
    - sigma_y: yield stress
    - n: hardening exponent
    """
    return strain * E / (1 + (strain * E / sigma_y) ** (n-1))


# Create a funny stress test simulation
def run_material_personality_test():
    plt.style.use('ggplot')
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 7))
    fig.suptitle("Material Personalities Under Stress", fontsize=16)
    
    # Create our material personalities
    materials = [
        MaterialPersonality("Drama Queen Steel"),
        MaterialPersonality("Zen Master Rubber"),
        MaterialPersonality("Anxious Aluminum"),
        MaterialPersonality("Overconfident Titanium")
    ]
    
    # Set up plots
    ax1.set_xlabel('Strain (Îµ)')
    ax1.set_ylabel('Stress (Pa)')
    ax1.set_title('Stress-Strain Curves with Actual Material Properties')
    
    ax2.set_xlim(0, 100)
    ax2.set_ylim(0, 5)
    ax2.set_xlabel('Time')
    ax2.set_ylabel('Material')
    ax2.set_yticks([1, 2, 3, 4])
    ax2.set_yticklabels([m.material_type for m in materials])
    ax2.set_title('Material Reactions (watch them freak out!)')
    
    # Lines for stress-strain curves
    lines = [ax1.plot([], [], label=m.material_type, color=m.color)[0] for m in materials]
    
    # Text annotations for mood messages
    mood_texts = [ax2.text(0, i+1, "", fontsize=9) for i in range(4)]
    
    time_text = ax2.text(0.02, 0.95, '', transform=ax2.transAxes)
    
    # Max stress values normalized to breaking points
    max_stresses = [
        m.breaking_point * 1.1 for m in materials  # Go slightly over breaking point
    ]
    
    # Initialize with empty data
    stress_data = [[] for _ in materials]
    strain_data = [[] for _ in materials]
    
    def init():
        for line in lines:
            line.set_data([], [])
        for text in mood_texts:
            text.set_text("")
        time_text.set_text("")
        return lines + mood_texts + [time_text]
    
    def animate(i):
        # Time-based stress function (increasing, with some oscillation)
        time_factor = i / 100
        
        # Update data for each material
        for j, material in enumerate(materials):
            # Calculate stress with some randomness and oscillation
            base_stress = max_stresses[j] * time_factor
            oscillation = max_stresses[j] * 0.05 * np.sin(i * 0.2)
            stress = base_stress + oscillation
            
            # Apply stress and get strain
            strain = material.apply_stress(stress)
            
            # Update plot data
            stress_data[j] = material.stress_history
            strain_data[j] = material.strain_history
            lines[j].set_data(strain_data[j], stress_data[j])
            
            # Update mood message
            if material.is_broken():
                mood_texts[j].set_text(f"ðŸ’¥ BROKEN! Final words: {material.get_mood()}")
                mood_texts[j].set_color('red')
            else:
                mood_texts[j].set_text(material.get_mood())
                mood_texts[j].set_color(material.color)
        
        # Update time display
        time_text.set_text(f'Time: {i/10:.1f}s')
        
        # Adjust axes if needed
        max_strain = max([max(strain) if strain else 0 for strain in strain_data])
        max_stress = max([max(stress) if stress else 0 for stress in stress_data])
        
        if max_strain > 0:
            ax1.set_xlim(0, max_strain * 1.1)
        if max_stress > 0:
            ax1.set_ylim(0, max_stress * 1.1)
            
        ax1.legend(loc='upper left')
        
        return lines + mood_texts + [time_text]
    
    # Create animation
    ani = FuncAnimation(fig, animate, frames=100, init_func=init, blit=True, interval=100)
    
    plt.tight_layout()
    plt.show()
    
    # Analyze results with actual materials science
    print("\n========= Materials Science Analysis =========")
    print("Let's fit our data to the Ramberg-Osgood model!")
    
    for i, material in enumerate(materials):
        if len(material.strain_history) > 10:
            try:
                # Fit the stress-strain data to the Ramberg-Osgood model
                popt, _ = curve_fit(
                    ramberg_osgood, 
                    np.array(material.strain_history), 
                    np.array(material.stress_history),
                    p0=[material.youngs_modulus, material.breaking_point*0.7, 5],
                    maxfev=10000
                )
                
                # Extract material properties from the fit
                E_fit, sigma_y_fit, n_fit = popt
                
                print(f"\n{material.material_type} Properties:")
                print(f"Young's Modulus (original): {material.youngs_modulus/1e9:.2f} GPa")
                print(f"Young's Modulus (fitted): {E_fit/1e9:.2f} GPa")
                print(f"Yield Strength: {sigma_y_fit/1e6:.2f} MPa")
                print(f"Strain Hardening Exponent: {n_fit:.2f}")
                
                if material.is_broken():
                    print(f"Status: FAILED at {max(material.stress_history)/1e6:.2f} MPa")
                else:
                    print(f"Status: Survived with grace!")
                
            except RuntimeError:
                print(f"\n{material.material_type}: Could not fit model - insufficient data or poor convergence")


if __name__ == "__main__":
    print("ðŸ§ª Welcome to the Material Personality Lab! ðŸ§ª")
    print("Where stress-strain curves meet emotional breakdowns")
    run_material_personality_test()
    print("\nRemember: Materials, like people, have breaking points. Be kind to both!")
    
# Generated by Copilot